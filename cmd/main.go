package main

import (
	"errors"
	"flag"
	"fmt"
	"os"
	"time"
	"webrtc-playground/internal/operator/coordinator"
	"webrtc-playground/internal/operator/peer"
	"webrtc-playground/internal/worker"
	"webrtc-playground/internal/worker/chat"
	"webrtc-playground/internal/worker/randmessage"
)

const (
	NODE_TYPE_PEER  = "PEER"
	NODE_TYPE_COORD = "COORD"
	PEER_TIMEOUT    = 5 * time.Second
)

type WorkerFlags struct {
	Mode        string
	NOfMessages int
	Username    string
}

func setupWorkerFlags(workerFlags *WorkerFlags) {
	// TODO: setup worker flags
	modeFlagDescription := fmt.Sprintf("Worker worker, can either be %v, %v or %v", worker.WORKER_RAND_MESSAGES, worker.WORKER_CHAT, worker.WORKER_FS)
	flag.StringVar(&workerFlags.Mode, "worker", worker.WORKER_RAND_MESSAGES, modeFlagDescription)
	nOfMessagesFlagDescription := fmt.Sprintf("worker: %v, number of random messages need to be generated by workers", worker.WORKER_RAND_MESSAGES)
	flag.IntVar(&workerFlags.NOfMessages, "n_of_messages", randmessage.DEFAULT_N_OF_MESSAGES, nOfMessagesFlagDescription)
	usernameFlagDescription := fmt.Sprintf("worker: %v, arbitrary username for chat user", worker.WORKER_CHAT)
	flag.StringVar(&workerFlags.Username, "username", chat.DEFAULT_USERNAME, usernameFlagDescription)

}

func createWorkerFromFlags(workerFlags *WorkerFlags) (w worker.Worker, err error) {
	err = errors.New("unknown mode of worker")

	switch workerFlags.Mode {
	case worker.WORKER_RAND_MESSAGES:
		w, err = randmessage.New(workerFlags.NOfMessages)
	case worker.WORKER_CHAT:
		w, err = chat.New(workerFlags.Username)
	}

	return
}

func main() {
	var nodeType, coordAddress string
	workerFlags := WorkerFlags{}

	coordPort := flag.Int("coordinator_port", -1, "Port on which coordinator runs, mandatory field")
	flag.StringVar(&nodeType, "node_type", "", "Determines which logic should node enforce, mandatory field")
	flag.StringVar(&coordAddress, "coordinator_address", "", "Address for coordinator node, mandatory field")

	setupWorkerFlags(&workerFlags)

	flag.Parse()
	if nodeType == "" || *coordPort == -1 {
		fmt.Fprintf(os.Stderr, "Mandatory fields were missing, please check -h\n")
		os.Exit(1)
	}

	w, err := createWorkerFromFlags(&workerFlags)
	// Only peer node needs worker
	if nodeType == NODE_TYPE_PEER && err != nil {
		fmt.Fprint(os.Stderr, err)
		os.Exit(1)
	}

	switch nodeType {
	case NODE_TYPE_PEER:
		// Await for some arbitrary duration to let coordinator node start up
		fmt.Printf("Peer has been started, waiting for %v\n", PEER_TIMEOUT)
		time.Sleep(PEER_TIMEOUT)

		peerNode, err := peer.New(coordAddress, *coordPort, &w)
		if err != nil {
			fmt.Fprint(os.Stderr, err)
			os.Exit(1)
		}

		if err := peerNode.InitConnection(); err != nil {
			fmt.Fprint(os.Stderr, err)
			os.Exit(1)
		}

		if err := peerNode.Await(); err != nil {
			fmt.Fprint(os.Stderr, err)
			os.Exit(1)
		}

		fmt.Printf("Peer Node completed successfully\n")
	case NODE_TYPE_COORD:
		coordNode, err := coordinator.New(*coordPort)
		if err != nil {
			panic(err)
		}
		coordNode.Listen()
	default:
		fmt.Fprintf(os.Stderr, "Node type is not correct, it can be following: [%v, %v]", NODE_TYPE_COORD, NODE_TYPE_PEER)
		os.Exit(1)
	}
}
